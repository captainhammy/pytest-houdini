[tox]
envlist = h20,ruff-check,ruff-format-check,isort-check,mypy,docstring-check
skipsdist = true

[gh-actions]
python =
    3.9: py39, ruff-check, ruff-format-check, isort-check, mypy, docstring-check
    3.10: py310, ruff-check, ruff-format-check, isort-check, mypy, docstring-check

[testenv]
allowlist_externals=
    coverage
    echo
    env
    hython
deps =
    .[test]
setenv =
    # Extra args to pass to the Hython command.  This is really only useful for local testing using
    # my (Graham's) setup which relies on selecting the Houdini version via wrapper arg. When things
    # are run automatically on Github the expected Houdini version is already sourced.
    hython_extra=

commands =
    coverage erase
    # We need to force in the tox env as we won't be using the created venv and thus won't get the
    # packages added to the path.
    env PYTHONPATH={envsitepackagesdir} hython {env:hython_extra} -m pytest tests/
    coverage report --fail-under=100 --skip-covered

[testenv:h195]
basepython=py39
setenv =
  hython_extra=--version 19.5

[testenv:h20]
basepython=py310
setenv =
  hython_extra=--version 20.0

[testenv:ruff-check]
deps = ruff
commands = ruff check --preview src/ tests/

[testenv:ruff-format-check]
deps = ruff
commands = ruff format --preview --check src/ tests/

[testenv:ruff-format-run]
deps = ruff
commands = ruff format --preview src/ tests/

[testenv:isort-check]
deps = isort
commands = isort --check src/ tests/ setup.py

[testenv:isort-run]
deps = isort
commands = isort src/ tests/ setup.py

[testenv:mypy]
deps =
    .[test]
    mypy
commands = mypy

[testenv:docstring-check]
deps =
    pydocstringformatter
commands = pydocstringformatter --exit-code src/

[testenv:docstring-run]
deps =
    pydocstringformatter
commands = pydocstringformatter --write src/

[testenv:docs]
deps =
    -r docs/requirements.txt
commands =
    sphinx-build -b html -d {envtmpdir}/doctrees docs/ {envtmpdir}/html
    echo "Docs available at file://{envtmpdir}/html/index.html"
